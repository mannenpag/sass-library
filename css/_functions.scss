@mixin makeGrid() {
	.grid {
		display:grid;
		grid-template-columns: repeat(map-get($columns,12), 1fr);

		&.gap {
			grid-gap:var(--gap-size);
			--gap-size:#{map-get($spacers, 'm')};
		}
	}
}

@mixin makeRow($breakpoint:'') {
	@each $i, $v in $columns {
		.row-#{$breakpoint}-#{$i} {
			grid-template-columns: repeat(#{$v}, 1fr);
		}
	}
}

@mixin makeGap($breakpoint:'') {
	@each $i, $v in $spacers {
		.grid.gap-#{$breakpoint}-#{$i} {
			--grid-gap:#{$v};
		}
	}
}

@mixin makeColumns($breakpoint:'',$columns:12) {
	@for $i from 1 through $columns {
		.col-#{$breakpoint}-#{$i} {
			grid-column-end: span #{$i};
		}
		.offset-#{$breakpoint}-#{$i} {
			grid-column-start: $i;
		}
	}
}

@mixin makeUtilities($breakpoint:'') {
	@each $box-i,$box-v in $boxes {
		@each $size-i,$size-v in $spacers {
			@each $pos-i,$pos-v in $positions {
				.#{$box-i}-#{$breakpoint}-#{$pos-i}#{$size-i} {
					#{$box-v}-#{$pos-v}:$size-v;
				}
			}
			.#{$box-i}-#{$breakpoint}-h#{$size-i} {
				#{$box-v}-left:$size-v;
				#{$box-v}-right:$size-v;
			}
			.#{$box-i}-#{$breakpoint}-v#{$size-i} {
				#{$box-v}-top:$size-v;
				#{$box-v}-bottom:$size-v;
			}
			.#{$box-i}-#{$breakpoint}-#{$size-i} {
				#{$box-v}:$size-v;
			}
		}
	}
	@each $i,$v in $alignment-horizontal {
		.align-text-#{$breakpoint}-#{$i} { text-align:$v; }
	}
	@each $i,$v in $alignment-vertical {
		.align-#{$breakpoint}-#{$i} { vertical-align:$v; }
	}
	@each $i,$v in $display {
		.display-#{$breakpoint}-#{$i} { display:$v; }
	}
	@each $i,$v in $positioning {
		.position-#{$breakpoint}-#{$i} { position:$v; }
	}
	@each $i,$v in $zindex {
		.zindex-#{$breakpoint}-#{$i} { z-index:$v; }
	}
	@each $i,$v in $maxwidths {
		.max-#{$breakpoint}-#{$i} { max-width:$v; }
	}
}

@mixin makeFlex($breakpoint:'') {
	.flex {
		&-#{$breakpoint}-parent { display:flex; }
		&-#{$breakpoint}-child { flex: 1 1 auto; }
		&-#{$breakpoint}-none { flex:none; }
		&-#{$breakpoint}-wrap { flex-wrap:wrap; }
		&-#{$breakpoint}-vertical { flex-direction:column; }
		&-#{$breakpoint}-align-center { align-items:center; }
		&-#{$breakpoint}-justify-center { justify-content:center; }
		&-#{$breakpoint}-justify-end { justify-content:flex-end; }

	}
	@for $i from 1 through 10 {
		.order-#{$breakpoint}-#{$i} { order:$i; }
	}
}

@mixin breakpoint($point, $value: 0) {
	@if $point == mobile {
		@media screen and (min-width: map-get($breakpoints, 'sm')) { @content; }
	}
	@else if $point == tablet {
			@media screen and (min-width: map-get($breakpoints, 'md')) { @content; }
	} 
	@else if $point == laptop {
			@media screen and (min-width: map-get($breakpoints, 'lg')) { @content; }
	}  
	@else if $point == desktop {
			@media screen and (min-width: map-get($breakpoints, 'xl')) { @content; }
	}
	@else {
			@media ($point: $value) { @content; }
	}
}

@mixin between-breakpoints($min, $max) {
	@media (min-width: $min) and (max-width: $max) {
		@content;
	}
}
